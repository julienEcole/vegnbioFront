import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../providers/simple_auth_provider.dart';
import '../factories/auth_view_factory.dart';
import '../screens/auth/auth_login_screen.dart';
import '../screens/auth/auth_register_screen.dart';

/// Service pour g√©rer la navigation li√©e √† l'authentification
class AuthNavigationService {
  
  /// Naviguer vers l'authentification (profil ou connexion selon l'√©tat)
  static void navigateToAuth(BuildContext context, WidgetRef ref) {
    print('üîê [AuthNavigationService] navigateToAuth appel√©');
    
    final authState = ref.read(simpleAuthProvider);
    print('üîê [AuthNavigationService] √âtat auth actuel: ${authState.status}');
    
    // Toujours naviguer vers /profil
    // AuthViewFactory g√©rera l'affichage selon l'√©tat d'authentification
    print('üîê [AuthNavigationService] Navigation vers /profil via AuthViewFactory');
    AuthViewFactory.navigateToAuthView(context, AuthViewType.profile);
  }

  /// Naviguer vers l'accueil
  static void navigateToHome(BuildContext context) {
    print('üè† [AuthNavigationService] Navigation vers l\'accueil');
    context.go('/');
  }

  /// Naviguer vers une route sp√©cifique apr√®s authentification
  static void navigateAfterAuth(BuildContext context, String? redirectPath) {
    final path = redirectPath ?? '/';
    print('üîÄ [AuthNavigationService] Navigation apr√®s auth vers: $path');
    context.go(path);
  }

  /// V√©rifier si l'utilisateur peut acc√©der √† une route prot√©g√©e
  static bool canAccessRoute(String route, String? userRole) {
    // D√©finir les routes prot√©g√©es par r√¥le
    const Map<String, List<String>> protectedRoutes = {
      'admin': ['/admin'],
      'restaurateur': ['/dashboard/restaurateur'],
      'fournisseur': ['/dashboard/fournisseur'],
      'client': ['/profil', '/commandes'],
    };

    // Routes publiques accessibles √† tous
    const List<String> publicRoutes = [
      '/',
      '/menus',
      '/restaurants', 
      '/evenements',
      '/services',
      '/profil', // Profil est accessible √† tous (g√®re l'auth en interne)
    ];

    // Si c'est une route publique
    if (publicRoutes.contains(route)) {
      return true;
    }

    // Si l'utilisateur n'est pas connect√©
    if (userRole == null) {
      return false;
    }

    // V√©rifier si le r√¥le a acc√®s √† la route
    final allowedRoutes = protectedRoutes[userRole] ?? [];
    return allowedRoutes.any((allowedRoute) => route.startsWith(allowedRoute));
  }

  /// Rediriger vers la route appropri√©e selon le r√¥le
  static String getDefaultRouteForRole(String? role) {
    switch (role?.toLowerCase()) {
      case 'admin':
        return '/admin';
      case 'restaurateur':
        return '/dashboard/restaurateur';
      case 'fournisseur':
        return '/dashboard/fournisseur';
      case 'client':
      default:
        return '/';
    }
  }

  /// Naviguer vers l'√©cran de connexion
  static void navigateToLogin(BuildContext context) {
    print('üîê [AuthNavigationService] Navigation vers l\'√©cran de connexion');
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const AuthLoginScreen()),
    );
  }

  /// Naviguer vers l'√©cran d'inscription
  static void navigateToRegister(BuildContext context) {
    print('üìù [AuthNavigationService] Navigation vers l\'√©cran d\'inscription');
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const AuthRegisterScreen()),
    );
  }
}