import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// Service pour g√©rer la navigation et les redirections apr√®s connexion
class NavigationService {
  static const String _lastPageKey = 'last_visited_page';
  static const String _lastPageParamsKey = 'last_page_params';
  
  // Singleton
  static final NavigationService _instance = NavigationService._internal();
  factory NavigationService() => _instance;
  NavigationService._internal();

  /// Sauvegarder la page actuelle avant la redirection vers la connexion
  Future<void> saveCurrentPage(BuildContext context) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final currentLocation = GoRouterState.of(context).uri.path;
      final currentParams = GoRouterState.of(context).pathParameters;
      
      await prefs.setString(_lastPageKey, currentLocation);
      await prefs.setString(_lastPageParamsKey, currentParams.toString());
      
      print('üìç NavigationService: Page sauvegard√©e: $currentLocation');
    } catch (e) {
      print('‚ùå NavigationService: Erreur lors de la sauvegarde de la page: $e');
    }
  }

  /// Naviguer vers la page de connexion en sauvegardant la page actuelle
  Future<void> navigateToLogin(BuildContext context) async {
    await saveCurrentPage(context);
    
    if (context.mounted) {
      // Naviguer vers la page de profil/connexion
      context.go('/profil');
    }
  }

  /// Revenir √† la page pr√©c√©dente apr√®s connexion r√©ussie
  Future<void> returnToPreviousPage(BuildContext context) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastPage = prefs.getString(_lastPageKey);
      
      if (lastPage != null && lastPage.isNotEmpty && lastPage != '/profil') {
        print('üîÑ NavigationService: Retour √† la page pr√©c√©dente: $lastPage');
        
        // Nettoyer les donn√©es sauvegard√©es
        await prefs.remove(_lastPageKey);
        await prefs.remove(_lastPageParamsKey);
        
        if (context.mounted) {
          context.go(lastPage);
        }
      } else {
        // Aller √† la page d'accueil par d√©faut
        print('üè† NavigationService: Redirection vers l\'accueil');
        if (context.mounted) {
          context.go('/');
        }
      }
    } catch (e) {
      print('‚ùå NavigationService: Erreur lors du retour √† la page pr√©c√©dente: $e');
      // En cas d'erreur, aller √† l'accueil
      if (context.mounted) {
        context.go('/');
      }
    }
  }

  /// Obtenir la page pr√©c√©dente sauvegard√©e
  Future<String?> getPreviousPage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString(_lastPageKey);
    } catch (e) {
      print('‚ùå NavigationService: Erreur lors de la r√©cup√©ration de la page pr√©c√©dente: $e');
      return null;
    }
  }

  /// Nettoyer les donn√©es de navigation
  Future<void> clearNavigationData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_lastPageKey);
      await prefs.remove(_lastPageParamsKey);
      print('üóëÔ∏è NavigationService: Donn√©es de navigation nettoy√©es');
    } catch (e) {
      print('‚ùå NavigationService: Erreur lors du nettoyage: $e');
    }
  }

  /// V√©rifier si une page pr√©c√©dente est sauvegard√©e
  Future<bool> hasPreviousPage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastPage = prefs.getString(_lastPageKey);
      return lastPage != null && lastPage.isNotEmpty && lastPage != '/profil';
    } catch (e) {
      return false;
    }
  }
}
