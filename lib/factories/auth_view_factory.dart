import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../providers/auth_provider.dart';
import '../screens/auth/auth_default_screen.dart';
import '../screens/auth/auth_login_screen.dart';
import '../screens/auth/auth_register_screen.dart';
import '../screens/auth/auth_profile_screen.dart';

/// Factory pour g√©rer l'affichage des √©crans d'authentification
/// Responsabilit√© unique : d√©terminer quel √©cran d'auth afficher selon l'√©tat
class AuthViewFactory {
  /// Cr√©er le widget d'authentification appropri√© selon l'√©tat
  static Widget createAuthView(WidgetRef ref, {AuthViewType? forcedType}) {
    // print('üèóÔ∏è [AuthViewFactory] createAuthView appel√©');
    
    final authState = ref.watch(authProvider);
    // print('üèóÔ∏è [AuthViewFactory] AuthState: ${authState.status}');
    
    // Si un type est forc√©, l'utiliser directement
    if (forcedType != null) {
      // print('üèóÔ∏è [AuthViewFactory] Type forc√©: $forcedType');
      return _createViewByType(forcedType, ref);
    }
    
    // Si l'√©tat est non authentifi√©, afficher directement l'√©cran par d√©faut
    if (authState.status == AuthStatus.unauthenticated) {
      // print('üèóÔ∏è [AuthViewFactory] √âtat non authentifi√© - Affichage √©cran par d√©faut');
      return const AuthDefaultScreen();
    }
    
    // Sinon, d√©terminer selon l'√©tat d'authentification
    if (authState.isLoading) {
      // print('üèóÔ∏è [AuthViewFactory] √âtat: Loading');
      return const AuthLoadingView();
    }
    
    if (authState.isAuthenticated) {
      // print('üèóÔ∏è [AuthViewFactory] √âtat: Authenticated - Affichage SimpleProfileScreen');
      return const AuthProfileScreen();
    }
    
    if (authState.hasError) {
      // print('üèóÔ∏è [AuthViewFactory] √âtat: Error - ${authState.errorMessage}');
      return AuthDefaultScreen(errorMessage: authState.errorMessage);
    }
    
    // Par d√©faut, afficher l'√©cran de connexion/inscription
    // print('üèóÔ∏è [AuthViewFactory] √âtat: Par d√©faut - AuthDefaultScreen');
    return const AuthDefaultScreen();
  }
  
  /// Cr√©er un √©cran sp√©cifique selon le type
  static Widget _createViewByType(AuthViewType type, WidgetRef ref) {
    // print('üèóÔ∏è [AuthViewFactory] _createViewByType: $type');
    
    switch (type) {
      case AuthViewType.defaultView:
        return const AuthDefaultScreen();
      case AuthViewType.login:
        return const AuthLoginScreen();
      case AuthViewType.register:
        return const AuthRegisterScreen();
      case AuthViewType.profile:
        return const AuthProfileScreen(); // Utiliser SimpleProfileScreen
    }
  }
  
  /// Naviguer vers un √©cran d'authentification sp√©cifique
  static void navigateToAuthView(BuildContext context, AuthViewType type) {
    // print('üîÄ [AuthViewFactory] navigateToAuthView: $type');
    
    switch (type) {
      case AuthViewType.defaultView:
      case AuthViewType.login:
      case AuthViewType.register:
      case AuthViewType.profile:
        // Toujours naviguer vers /profil, la factory g√©rera l'affichage
        context.go('/profil');
        break;
    }
  }
}

/// Types d'√©crans d'authentification disponibles
enum AuthViewType {
  defaultView,  // √âcran par d√©faut avec boutons connexion/inscription
  login,        // √âcran de connexion
  register,     // √âcran d'inscription
  profile,      // √âcran de profil utilisateur
}

/// Widget de chargement pour l'authentification
class AuthLoadingView extends StatelessWidget {
  const AuthLoadingView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            Text(
              'V√©rification de l\'authentification...',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
          ],
        ),
      ),
    );
  }
}

/// Widget wrapper pour les √©crans d'authentification
/// Responsabilit√© : g√©rer la navigation et l'√©tat global
class AuthViewWrapper extends ConsumerWidget {
  final AuthViewType? forcedType;
  
  const AuthViewWrapper({
    super.key,
    this.forcedType,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      body: SafeArea(
        child: AuthViewFactory.createAuthView(ref, forcedType: forcedType),
      ),
    );
  }
}

/// Mixin pour faciliter l'utilisation de la factory dans les widgets
mixin AuthViewMixin {
  /// Obtenir le widget d'authentification appropri√©
  Widget getAuthView(WidgetRef ref, {AuthViewType? type}) {
    return AuthViewFactory.createAuthView(ref, forcedType: type);
  }
  
  /// Naviguer vers un √©cran d'authentification
  void navigateToAuth(BuildContext context, AuthViewType type) {
    AuthViewFactory.navigateToAuthView(context, type);
  }
}
