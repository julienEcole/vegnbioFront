import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/auth_provider.dart';
import '../screens/events/events_screen.dart';
import '../widgets/events/public_events_view.dart';

/// Factory pour g√©rer l'affichage des vues d'√©v√©nements
/// Responsabilit√© unique : d√©terminer quelle vue d'√©v√©nement afficher selon l'√©tat d'auth et les permissions
class EventViewFactory {
  
  /// Cr√©er la vue d'√©v√©nement appropri√©e selon l'√©tat d'authentification et les permissions
  static Widget createEventView(WidgetRef ref, {int? eventId}) {
    print('üéâ [EventViewFactory] createEventView appel√©');
    print('üéâ [EventViewFactory] eventId: $eventId');
    
    final authState = ref.watch(authProvider);
    print('üéâ [EventViewFactory] AuthState: ${authState.status}, Role: ${authState.role}');
    
    // Pour l'instant, tous les utilisateurs voient la m√™me vue
    // TODO: Impl√©menter une vue admin pour les √©v√©nements si n√©cessaire
    print('üéâ [EventViewFactory] Affichage: EventsScreen');
    return const EventsScreen();
  }
  
  /// Cr√©er une vue d'√©v√©nement sp√©cifique
  static Widget createSpecificEventView(EventViewType type, WidgetRef ref, {int? eventId}) {
    print('üéâ [EventViewFactory] createSpecificEventView: $type');
    
    switch (type) {
      case EventViewType.publicList:
        return const EventsScreen();
      case EventViewType.adminList:
        // TODO: Impl√©menter AdminEventScreen si n√©cessaire
        return const EventsScreen();
      case EventViewType.publicWidget:
        return const PublicEventsView();
    }
  }
  
  /// V√©rifier si l'utilisateur a les permissions d'administration pour les √©v√©nements
  static bool _hasAdminPermissions(String? role) {
    if (role == null) return false;
    return ['admin'].contains(role.toLowerCase());
  }
  
  /// Obtenir le type de vue recommand√© selon l'√©tat d'authentification
  static EventViewType getRecommendedViewType(WidgetRef ref) {
    final authState = ref.watch(authProvider);
    
    if (authState.isAuthenticated && _hasAdminPermissions(authState.role)) {
      return EventViewType.adminList;
    }
    
    return EventViewType.publicList;
  }
  
  /// V√©rifier si l'utilisateur peut cr√©er des √©v√©nements
  static bool canCreateEvents(WidgetRef ref) {
    final authState = ref.watch(authProvider);
    
    if (!authState.isAuthenticated) return false;
    
    final role = authState.role?.toLowerCase();
    return ['admin', 'restaurateur'].contains(role);
  }
  
  /// V√©rifier si l'utilisateur peut g√©rer un √©v√©nement sp√©cifique
  static bool canManageEvent(WidgetRef ref, int eventId) {
    final authState = ref.watch(authProvider);
    
    if (!authState.isAuthenticated) return false;
    
    final role = authState.role?.toLowerCase();
    
    // Les admins peuvent tout g√©rer
    if (role == 'admin') return true;
    
    // Les restaurateurs peuvent g√©rer leurs propres √©v√©nements
    // TODO: Impl√©menter la v√©rification de propri√©t√© de l'√©v√©nement
    if (role == 'restaurateur') {
      return true; // Temporaire
    }
    
    return false;
  }
}

/// Types de vues d'√©v√©nements disponibles
enum EventViewType {
  publicList,    // Liste publique des √©v√©nements
  adminList,     // Interface d'administration des √©v√©nements
  publicWidget,  // Widget public pour affichage dans d'autres √©crans
}

/// Extensions pour faciliter l'utilisation
extension EventViewTypeExtension on EventViewType {
  String get displayName {
    switch (this) {
      case EventViewType.publicList:
        return 'Liste des √©v√©nements';
      case EventViewType.adminList:
        return 'Administration des √©v√©nements';
      case EventViewType.publicWidget:
        return 'Widget √©v√©nements';
    }
  }
  
  bool get requiresAuth {
    switch (this) {
      case EventViewType.publicList:
      case EventViewType.publicWidget:
        return false;
      case EventViewType.adminList:
        return true;
    }
  }
  
  List<String> get requiredRoles {
    switch (this) {
      case EventViewType.publicList:
      case EventViewType.publicWidget:
        return [];
      case EventViewType.adminList:
        return ['admin', 'restaurateur'];
    }
  }
}

