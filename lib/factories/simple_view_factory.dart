import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../utils/web_logger.dart';
import '../providers/auth_state_provider.dart';
import '../widgets/menu/public_menu_view.dart';
import '../widgets/menu/authenticated_menu_view.dart';
import '../widgets/restaurant/public_restaurant_view.dart';
import '../widgets/public_events_view.dart';
import '../widgets/public_services_view.dart';
import '../widgets/authenticated_events_view.dart';
import '../widgets/authenticated_services_view.dart';
import '../widgets/public_home_view.dart';

/// Factory simplifi√©e qui utilise les providers pour g√©rer l'authentification
class SimpleViewFactory {
  
  /// Cr√©er une vue selon l'√©tat d'authentification des providers
  static Widget createView({
    required String pageType,
    Map<String, dynamic>? parameters,
    Widget? fallbackView,
    bool requireAuth = true,
  }) {
    print('üö® [SimpleViewFactory] CREATEVIEW APPEL√â !');
    print('üö® PageType: $pageType, RequireAuth: $requireAuth');
    
    WebLogger.logWithEmoji('[SimpleViewFactory] CREATEVIEW APPEL√â !', 'üö®', color: '#9C27B0');
    WebLogger.logStyled('PageType: $pageType', color: '#9C27B0');
    WebLogger.logStyled('RequireAuth: $requireAuth', color: '#9C27B0');

    return _SimpleViewFactoryWidget(
      pageType: pageType,
      parameters: parameters,
      fallbackView: fallbackView,
      requireAuth: requireAuth,
    );
  }
}

/// Widget interne qui utilise les providers pour g√©rer l'authentification
class _SimpleViewFactoryWidget extends ConsumerWidget {
  final String pageType;
  final Map<String, dynamic>? parameters;
  final Widget? fallbackView;
  final bool requireAuth;

  const _SimpleViewFactoryWidget({
    required this.pageType,
    this.parameters,
    this.fallbackView,
    required this.requireAuth,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    print('üè≠ [SimpleViewFactory] ===== BUILD =====');
    print('üè≠ PageType: $pageType, RequireAuth: $requireAuth');
    
    WebLogger.logWithEmoji('[SimpleViewFactory] ===== BUILD =====', 'üè≠', color: '#9C27B0');
    WebLogger.logStyled('PageType: $pageType', color: '#9C27B0');
    WebLogger.logStyled('RequireAuth: $requireAuth', color: '#9C27B0');

    // √âcouter l'√©tat d'authentification
    final authState = ref.watch(authStateProvider);
    
    print('üè≠ AuthState - Loading: ${authState.isLoading}');
    print('üè≠ AuthState - Authenticated: ${authState.isAuthenticated}');
    print('üè≠ AuthState - Role: ${authState.userRole}');
    
    WebLogger.logStyled('AuthState - Loading: ${authState.isLoading}', color: '#9C27B0');
    WebLogger.logStyled('AuthState - Authenticated: ${authState.isAuthenticated}', color: '#9C27B0');
    WebLogger.logStyled('AuthState - Role: ${authState.userRole}', color: '#9C27B0');

    // Affichage du loading
    if (authState.isLoading) {
      WebLogger.logStyled('‚Üí Affichage LOADING', color: '#9C27B0');
      return const Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text('V√©rification de l\'authentification...'),
            ],
          ),
        ),
      );
    }

    // Gestion des erreurs
    if (authState.error != null) {
      WebLogger.logWithEmoji('Erreur auth: ${authState.error}', '‚ùå', color: '#F44336');
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error, color: Colors.red, size: 48),
              SizedBox(height: 16),
              Text('Erreur d\'authentification'),
              SizedBox(height: 8),
              Text(authState.error!, style: TextStyle(color: Colors.red)),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => ref.read(authStateProvider.notifier).refresh(),
                child: Text('R√©essayer'),
              ),
            ],
          ),
        ),
      );
    }

    return _buildViewFromAuthState(context, authState);
  }

  /// Construire la vue appropri√©e selon l'√©tat d'authentification
  Widget _buildViewFromAuthState(BuildContext context, AuthState authState) {
    WebLogger.logWithEmoji('[SimpleViewFactory] ===== _buildViewFromAuthState =====', 'üèóÔ∏è', color: '#9C27B0');
    WebLogger.logStyled('PageType: $pageType', color: '#9C27B0');
    WebLogger.logStyled('Authenticated: ${authState.isAuthenticated}', color: '#9C27B0');
    WebLogger.logStyled('Role: ${authState.userRole}', color: '#9C27B0');

    // Si l'authentification est requise mais l'utilisateur n'est pas connect√©
    if (requireAuth && !authState.isAuthenticated) {
      WebLogger.logWithEmoji('‚Üí Authentification requise mais utilisateur non connect√©', 'üîí', color: '#FF5722');
      return _buildAuthRequiredView(context);
    }

    // S√©lectionner la vue selon le type de page et l'√©tat d'authentification
    switch (pageType.toLowerCase()) {
      case 'home':
        WebLogger.logWithEmoji('‚Üí Construction PublicHomeView', 'üè†', color: '#00BCD4');
        return const PublicHomeView();
        
      case 'menu':
      case 'menus':
        if (authState.isAuthenticated) {
          WebLogger.logWithEmoji('‚Üí Construction AuthenticatedMenuView', 'üçΩÔ∏è', color: '#4CAF50');
          // Extraire restaurantId des param√®tres
          final restaurantId = parameters?['restaurantId'] as int?;
          return AuthenticatedMenuView(restaurantId: restaurantId);
        } else {
          WebLogger.logWithEmoji('‚Üí Construction PublicMenuView', 'üçΩÔ∏è', color: '#00BCD4');
          return const PublicMenuView();
        }
        
      case 'restaurant':
      case 'restaurants':
        WebLogger.logWithEmoji('‚Üí Construction PublicRestaurantView', 'üè™', color: '#00BCD4');
        // Extraire highlightRestaurantId des param√®tres
        final highlightRestaurantId = parameters?['highlightRestaurantId'] as int?;
        return PublicRestaurantView(highlightRestaurantId: highlightRestaurantId);
        
      case 'events':
      case 'evenements':
        if (authState.isAuthenticated) {
          WebLogger.logWithEmoji('‚Üí Construction AuthenticatedEventsView', 'üéâ', color: '#4CAF50');
          return const AuthenticatedEventsView();
        } else {
          WebLogger.logWithEmoji('‚Üí Construction PublicEventsView', 'üéâ', color: '#00BCD4');
          return const PublicEventsView();
        }
        
      case 'services':
        if (authState.isAuthenticated) {
          WebLogger.logWithEmoji('‚Üí Construction AuthenticatedServicesView', 'üõéÔ∏è', color: '#4CAF50');
          return const AuthenticatedServicesView();
        } else {
          WebLogger.logWithEmoji('‚Üí Construction PublicServicesView', 'üõéÔ∏è', color: '#00BCD4');
          return const PublicServicesView();
        }
        
      case 'profile':
      case 'profil':
        if (authState.isAuthenticated) {
          WebLogger.logWithEmoji('‚Üí Construction ProfileView', 'üë§', color: '#4CAF50');
          // TODO: Cr√©er ProfileView avec les providers
          return _buildProfileView(context);
        } else {
          WebLogger.logWithEmoji('‚Üí Profil n√©cessite authentification', 'üîí', color: '#FF5722');
          return _buildAuthRequiredView(context);
        }
        
      default:
        WebLogger.logWithEmoji('‚Üí Type de page inconnu: $pageType', '‚ùì', color: '#FF9800');
        return fallbackView ?? _buildUnknownPageView(context);
    }
  }

  /// Vue quand l'authentification est requise
  Widget _buildAuthRequiredView(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Authentification requise'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.lock, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Vous devez √™tre connect√© pour acc√©der √† cette page',
              style: Theme.of(context).textTheme.titleMedium,
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                // TODO: Naviguer vers la page de connexion
                Navigator.pushNamed(context, '/login');
              },
              child: Text('Se connecter'),
            ),
            SizedBox(height: 12),
            TextButton(
              onPressed: () {
                // TODO: Naviguer vers la page d'inscription
                Navigator.pushNamed(context, '/register');
              },
              child: Text('Cr√©er un compte'),
            ),
          ],
        ),
      ),
    );
  }

  /// Vue temporaire pour le profil
  Widget _buildProfileView(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profil'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.person, size: 64, color: Colors.blue),
            SizedBox(height: 16),
            Text(
              'Page de profil',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            SizedBox(height: 24),
            Text('TODO: Impl√©menter avec ProfileProvider'),
          ],
        ),
      ),
    );
  }

  /// Vue pour les pages inconnues
  Widget _buildUnknownPageView(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Page introuvable'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 64, color: Colors.orange),
            SizedBox(height: 16),
            Text(
              'Page non trouv√©e',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            SizedBox(height: 8),
            Text('Type de page: $pageType'),
            SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => Navigator.pushReplacementNamed(context, '/'),
              child: Text('Retour √† l\'accueil'),
            ),
          ],
        ),
      ),
    );
  }
}
